Tworzenie instancji z wieloma paramsami przez fluent API + interfejsy + build() dla zachowanie kolejności i zapewnienia, że wszystkie parametry podamy: 
https://stackoverflow.com/questions/6613429/how-to-ensure-that-builder-pattern-is-completed
https://stackoverflow.com/questions/40264/how-many-constructor-arguments-is-too-many

- zamiast epnych konstruktorów zrobić friend class albo settery
- W IsingInputData settery są niewskazane (chyba, że prywatne), bo to są dane z zewnątrz i nie można ich zmieniać - zatem friend klas IingIO ma tu sens
- IsingSimulationParameters powinien mieć settery, bo parametry mogą się ciągle zmieniać. Dajmy też duży konstruktor, ale...
- Wyodrębnijmy SavingParameters do osobnej klasy, równierz z setterami i konstruktorem.
- Ustawienia pojedynczych parametrów powinny być przez settery w IsingModelu, bo niektóre można zmienić tylko w initialize (lattice size, saveFinalResults? zależy kiedy tworzony jest plik)
- IsingSimulationParameters ma być bez setterów publicznych, bo zmiana parametrów ma sens tylko razem, jeśli jest robiona z zewnątrz. Pojedyncze ewentualnie można zmieniać tylko przez metody IsingModelu
- Kozaki, które chcą same zarządzać symulację, same muszą zadbać o zapisywanie. Dlatego konstruktor IsingModelu ma nie mieć SavingParams, ani initialize() ma nie mieć. Jedynie fullSimulation() ma miec - zabezpieczenie dla fajnych ludzi, by nie rzucało nullami.

Symulacje można przeprowadzać dla parametrów z zadanego przedziału. Dotyczy to nie tylko T, ale też rozmiaru, h (J chyba nie, bo przyjujemy 1). SimulationManager i InputData powinien uwzględnić zmiany T, rozmiaru i h. Na razie jednak, żeby pochwilić się, że coś robię, zróbmy program tak, by uwzględniał jedynie zmianę T.

class IsingSimulationsManager
{
	IsingSimulationsManager();
	PerformAllSimulations(IIsingInputData); // W pętli: tworzy IsingSimulationParameters i robi isingModel.fullSimulation(simParams)
}

class IIsingInputData
{
	IsingSimulationParameters* toFirstSimulationParameters(); // potem trzeba aktualizować jedynie T i correlation time
	bool IsingSimulationParameters* nextSimParams(currentSimParams*) // true, jeśli T i size tych następnych parametrów mieszczą się w zadanym zakresie
}

class IsingSimulationParameters
{
	int DEFAULT_CORREL_TIME
	int currentCorrelTime = DEFAULT_CORREL_TIME
	
	set T(double T, int correlTime)
	{
		...
	}
	set T(double T)
	{
		setT(T, currentCorrelTime);
	}
}


- TODO: save meantime quantites using IIsingIO
- do saveSpins() zamiast całego modelu, przesłać tylko wskaźnik na getSpin()
- sprawdzić, czy wektor żyje na stosie, czy stercie (jeśli na stosie, to musi być vectorem wskaźników)
- sprawdzić, czy vector i string jest przesyłany by reference
- w pliku wejściowym nie podawać correlationTimesAmount
- sprawdzić, czy interfejsy nie mogą mieć forward deklaracji zamiast includa

- niektóre klasy uczynić niewidoczne poza biblioteka
- jesli FalicovKimball tyż mo siatka spinów, to zrobić interfejs, z kerego IsingModel i FalicovKimballModel bydom dziedziczyć, wówczas phtio::IO bd mioł metoda saveSpins()

- do poniższego zrobić może wrappera (IftreamWrapper, FstreamWrapper), kery do konstruktora przyjmie nazwa pliku i bydzie mioł przyciski: 
* openIfstream()/openFstream()
* modelType() - przeczyto pierwszo linijka i zwroci rodzaj modelu
* readIsingInputData()
* readFalicovKimballInputData
[zastanowić się, czy close() bd jako osobny przycisk, czy w środku funkcji read()]
1. otworzyc stream
2. przeczytac nazwa modelu
3. if Ising then
		na otwartym dalej streamie przeczytac IsingInputData
	else if FalicovKimball then
		na otwartym dalej streamie przeczytac FalicovKimballInputdata
- LEPSZY POMYSŁ: zrobić klasa, kero przyjmie w konstruktorze nazwa pliku w konstruktorze przeczyto rodzaj modelu i wczyto do swojego odpowiedniego pola odpowiednie InputData. Klasa bd miała getModelType(), getIsingInputData() i getFalicovKimballData()

----------------------------------------------

correlationTime=5;minT=0.5;maxT=1.3

----------------------------------------------

J=
latticeSize=
h=

T		M		E		Cv		X

----------------------------------------------

J=
latticeSize=
h=

kT=
spiny

kT=
spiny

kT=
spiny

...

----------------------------------------------

modelName=Ising
J=
latticeSize=
h=
startkT=
endkT=
Tstep=
Trepeat=
saveFinalResults=1 lub 0
resultsFilePath=
saveSpins=
spinsFilePath=
saveMeantimeQuantities=
savingMeantimeQuantitesInterval=
meantimeQuantitiesFilePathPattern=
correlationTimesAmount=
correlationTime=5;minT=0.5;maxT=1.3
correlationTime=5;minT=0.5;maxT=1.3
correlationTime=5;minT=0.5;maxT=1.3
correlationTime=5;minT=0.5;maxT=1.3